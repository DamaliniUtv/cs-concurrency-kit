<?xml version="1.0" encoding="utf-8"?>
<topic id="ecb518db-2bfe-4374-a299-a309c51973c5" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
        A “Fiber Task” is any non-blocking task executed on a <codeEntityReference>T:SpicyPixel.Threading.Tasks.FiberTaskScheduler</codeEntityReference>, 
        but the most versatile fiber task is a <codeEntityReference>T:SpicyPixel.Threading.Tasks.YieldableTask</codeEntityReference>. These tasks are designed to 
        yield execution so that multiple tasks can execute concurrently on the same thread. 
        For a full explanation of how tasks and schedulers work, see the 
        <externalLink>
          <linkText>Task Parallel Library</linkText>
          <linkUri>http://msdn.microsoft.com/en-us/library/dd460717.aspx</linkUri>
        </externalLink>
        documentation on MSDN.
      </para>

    </introduction>

    <!-- <prerequisites><content>Optional prerequisites info</content></prerequisites> -->

    <!-- One or more procedure or section with procedure -->
    <!--<procedure>
      <title>Starting a fiber</title>
      <steps class="ordered">
        <step>
          <content>
            <para>First step</para>
          </content>
        </step>
        <step>
          <content>
            <para>Second step</para>
          </content>
        </step>
      </steps>
      <conclusion>Optional conclusion</conclusion> -->
   <!-- </procedure> -->

    <!-- Optional additional procedure or section with procedure -->
    <section address="creating-a-fiber-task-scheduler">
      <title>Creating a fiber task scheduler</title>
      <content>
        <para>
          Creating a fiber task scheduler is a two part process: create a fiber scheduler you want to use and then wrap that scheduler in a FiberTaskScheduler.
        </para>
        <code language="c#">
<![CDATA[
var taskScheduler = new FiberTaskScheduler(SystemFiberScheduler.StartNew());
]]>
        </code>
      </content>
    </section>
    <section address="executing-yieldable-tasks">
      <title>Executing yieldable tasks</title>
      <content>
        <para>
          Once a scheduler has been created, yieldable tasks can be queued to it.
        </para>
        <code language="c#">
<![CDATA[
void Main()
{
	// Start a task scheduler to dispatch tasks as fibers
	// on a separate thread
	var taskScheduler = new FiberTaskScheduler(SystemFiberScheduler.StartNew());

	// Start a new task, continue it with more work,
	// then wait for it to complete
	var task = Task.Factory.StartNew(FadeOutCoroutine(), CancellationToken.None, TaskCreationOptions.None, taskScheduler);
	task.ContinueWith(DoMoreWork(), taskScheduler).Wait();
}

IEnumerator FadeOutCoroutine()
{
	var totalTime = 4f;
	var currentTime = totalTime;
	while(currentTime > 0f)
	{
		setAlpha(currentTime / totalTime); // fade out
		currentTime -= Time.deltaTime;
		yield return FiberInstruction.YieldToAnyFiber;
	}
}

IEnumerator DoMoreWork()
{
  // do work
}
]]>
        </code>
      </content>
    </section>
    
    <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>
