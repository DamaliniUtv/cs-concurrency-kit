<?xml version="1.0" encoding="utf-8"?>
<topic id="65864d19-9dae-4afa-879c-ae732f989163" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        <markup>
          The Concurrency Kit is a .NET/Mono kit that includes a port of the <a href="http://msdn.microsoft.com/en-us/library/dd460717.aspx">Task Parallel Library</a>
          and extends it to support <a href="http://en.wikipedia.org/wiki/Fiber_(computer_science)">Fibers</a>, 
          <a href="http://en.wikipedia.org/wiki/Coroutine">Coroutines</a>, and <a href="http://unity3d.com/">Unity</a>. Fibers allow code paths
          to execute concurrently using a single thread by leveraging the co-operative
          yielding behavior of coroutines.
        </markup>
      </para>
      <code language="c#">
        <![CDATA[
// Start task 1
var t1 = Task.Factory.StartNew(() => PatHead());

// Start task 2
var t2 = Task.Factory.StartNew(() => RubTummy());

// This task will complete when t1 and t2 complete and
// then it will continue by executing a happy dance.
Task.WhenAll(t1, t2).ContinueWith((t3) => HappyDance());
          ]]>
      </code>
      <para>
        <markup>
        Because code written in this manner is designed with concurrency in mind,
        tasks can run in parallel across multiple threads or as concurrent fibers
        on a single thread just by changing out the task scheduler. This flexibility
        makes it easy to write and maintain asynchronous code that scales.
        </markup>
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="ProvidedPackages">
      <title>Provided packages</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          <markup>
            The Concurrency Kit consists of four modular packages.
            <br/><br/>
            <img src="../media/Packages.png"/>
          </markup>
        </para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <section>
      <title>Using asynchronous tasks</title>
      <content>
        <para>
          <markup>
            When using a .NET runtime earlier than v4, add a reference to the <b>System.Threading.dll</b> 
            assembly provided by the Concurrency Kit to add support for <a href="http://msdn.microsoft.com/en-us/library/dd537609">Tasks</a> 
            and <a href="http://msdn.microsoft.com/en-us/library/dd997305.aspx">Thread-Safe Collections</a> to your project. 
            For a full explanation of the Task programming model, 
            please see the <a href="http://msdn.microsoft.com/en-us/library/dd460717">Task Parallel Library</a> documentation on MSDN.
          </markup>
        </para>
      </content>
    </section>

    <section>
      <title>Using fibers</title>
      <content>
        <para>
          <markup>
            Fiber support is provided by the <b>SpicyPixel.Threading.dll</b> assembly and it includes packages for both the core fiber features
            as well as an asynchronous task model for fibers. Please see the
          </markup>
          <link xlink:href="ecb518db-2bfe-4374-a299-a309c51973c4">Fibers</link> key concepts topic for more information.
        </para>
      </content>
    </section>

    <section>
      <title>Using fibers in Unity</title>
      <content>
        <para>
          <markup>
            Unity specific fiber support is provided by the <b>SpicyPixel.Threading.Unity.dll</b> assembly and it includes a
          </markup>
          <codeEntityReference>T:SpicyPixel.Threading.UnityFiberScheduler</codeEntityReference>
          <markup>
            that can schedule work as a Unity coroutine using either the core fiber model or the task model. 
            The package also extends MonoBehaviour to support
            convenience methods for working with fibers and tasks.
          </markup>
        </para>
      </content>
    </section>

    <section>
      <title>Version history</title>
      <content>
        <para>
          <markup>
            Version 1.0.4
            <ul>
              <li>Integrate latest Mono version</li>
              <li>AOT fixes</li>
              <li>Rename scheduler 'SharedInstance' singletons to 'Default' for consistency with TPL</li>
            </ul>
            Version 1.0.3
            <ul>
              <li>Support iOS by working around AOT compiler limitations</li>
              <li>Add the following convenience types and members:
                <ul>
                  <li>class UnitySynchronizationContext</li>
                  <li>class UnityTaskFactory</li>
                  <li>class UnityTaskScheduler</li>
                  <li>property UnityFiberScheduler.SharedInstance</li>
                  <li>property ConcurrentBehaviour.SharedInstance</li>
                </ul>
              </li>
              <li>Add Unity sample ConcurrencyKitSample</li>
            </ul>
            Version 1.0
            <ul>
              <li>Initial release</li>
            </ul>
          </markup>
        </para>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>